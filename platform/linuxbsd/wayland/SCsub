#!/usr/bin/env python

Import("env")

# TODO: Add warning to headers and code about their autogenerated status.
WAYLAND_BUILDERS = {
    "WAYLAND_API_HEADER": Builder(
        action=Action(
            "wayland-scanner -c client-header ${SOURCE} ${TARGET}", 'Generating Wayland client header: "${TARGET}"'
        ),
        single_source=True,
    ),
    "WAYLAND_API_CODE": Builder(
        action=Action(
            "wayland-scanner -c private-code ${SOURCE} ${TARGET}",
            'Generating Wayland protocol marshalling code: "${TARGET}"',
        ),
        single_source=True,
    ),
}

env.Append(BUILDERS=WAYLAND_BUILDERS)

# TODO: Rebuild headers if they change
env.WAYLAND_API_HEADER(target="protocol/wayland.gen.h", source="#thirdparty/wayland/protocol/wayland.xml")
env.WAYLAND_API_CODE(target="protocol/wayland.gen.c", source="#thirdparty/wayland/protocol/wayland.xml")

env.WAYLAND_API_HEADER(
    target="protocol/xdg_shell.gen.h", source="#thirdparty/wayland-protocols/stable/xdg-shell/xdg-shell.xml"
)

env.WAYLAND_API_CODE(
    target="protocol/xdg_shell.gen.c", source="#thirdparty/wayland-protocols/stable/xdg-shell/xdg-shell.xml"
)

env.WAYLAND_API_HEADER(
    target="protocol/xdg_decoration.gen.h",
    source="#thirdparty/wayland-protocols/unstable/xdg-decoration/xdg-decoration-unstable-v1.xml",
)

env.WAYLAND_API_CODE(
    target="protocol/xdg_decoration.gen.c",
    source="#thirdparty/wayland-protocols/unstable/xdg-decoration/xdg-decoration-unstable-v1.xml",
)

env.WAYLAND_API_HEADER(
    target="protocol/xdg_activation.gen.h",
    source="#thirdparty/wayland-protocols/staging/xdg-activation/xdg-activation-v1.xml",
)

env.WAYLAND_API_CODE(
    target="protocol/xdg_activation.gen.c",
    source="#thirdparty/wayland-protocols/staging/xdg-activation/xdg-activation-v1.xml",
)

env.WAYLAND_API_HEADER(
    target="protocol/relative_pointer.gen.h",
    source="#thirdparty/wayland-protocols/unstable/relative-pointer/relative-pointer-unstable-v1.xml",
)

env.WAYLAND_API_CODE(
    target="protocol/relative_pointer.gen.c",
    source="#thirdparty/wayland-protocols/unstable/relative-pointer/relative-pointer-unstable-v1.xml",
)

env.WAYLAND_API_HEADER(
    target="protocol/pointer_constraints.gen.h",
    source="#thirdparty/wayland-protocols/unstable/pointer-constraints/pointer-constraints-unstable-v1.xml",
)

env.WAYLAND_API_CODE(
    target="protocol/pointer_constraints.gen.c",
    source="#thirdparty/wayland-protocols/unstable/pointer-constraints/pointer-constraints-unstable-v1.xml",
)

env.WAYLAND_API_HEADER(
    target="protocol/pointer_gestures.gen.h",
    source="#thirdparty/wayland-protocols/unstable/pointer-gestures/pointer-gestures-unstable-v1.xml",
)

env.WAYLAND_API_CODE(
    target="protocol/pointer_gestures.gen.c",
    source="#thirdparty/wayland-protocols/unstable/pointer-gestures/pointer-gestures-unstable-v1.xml",
)

env.WAYLAND_API_HEADER(
    target="protocol/primary_selection.gen.h",
    source="#thirdparty/wayland-protocols/unstable/primary-selection/primary-selection-unstable-v1.xml",
)

env.WAYLAND_API_CODE(
    target="protocol/primary_selection.gen.c",
    source="#thirdparty/wayland-protocols/unstable/primary-selection/primary-selection-unstable-v1.xml",
)

env.WAYLAND_API_HEADER(
    target="protocol/idle_inhibit.gen.h",
    source="#thirdparty/wayland-protocols/unstable/idle-inhibit/idle-inhibit-unstable-v1.xml",
)

env.WAYLAND_API_CODE(
    target="protocol/idle_inhibit.gen.c",
    source="#thirdparty/wayland-protocols/unstable/idle-inhibit/idle-inhibit-unstable-v1.xml",
)

source_files = [
    "dynwrappers/wayland-cursor.c",
    "dynwrappers/wayland-client-core.c",
    "dynwrappers/wayland-egl-core.c",
    "dynwrappers/xkbcommon.c",
    "dynwrappers/libdecor-so_wrap.c",
    "protocol/wayland.gen.c",
    "protocol/xdg_shell.gen.c",
    "protocol/xdg_decoration.gen.c",
    "protocol/xdg_activation.gen.c",
    "protocol/relative_pointer.gen.c",
    "protocol/pointer_constraints.gen.c",
    "protocol/pointer_gestures.gen.c",
    "protocol/primary_selection.gen.c",
    "protocol/idle_inhibit.gen.c",
    "display_server_wayland.cpp",
    "key_mapping_xkb.cpp",
]

if env["vulkan"]:
    source_files.append("vulkan_context_wayland.cpp")

if env["opengl3"]:
    source_files.append("egl_manager_wayland.cpp")

objects = []

for source_file in source_files:
    objects.append(env.Object(source_file))

Return("objects")
